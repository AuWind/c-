/*
常量：如1、2、500、-500、10000122为整数常量，2.5、1/3、6.1258、-9.9901、2的平方根为浮点数常量，代表一下确认的值。
变量:用于存储常量的内存空间并以一个名字来使用它的，
1.不同的类型的变量的存储不同的常量值
2.变量需先后明后使用
*/

#include<iostream>
#include<cstdio>
using namespace std;
int main(){
	int a1;//声明一个可存储整数变量a1(整型变量)，值不确定。
	float b1;//声明一个可存储浮点数变量b1(浮点变量)，值不确定。
	int a2, a3;//同时声明两个整型变量，值不确定。
	float b2,b3;
	int a4 = 9,a5=10;//同时声明两个整型变量，其中a4变量的赋值为9。
	float b4=1.0/3,b5=1.0/8;//同时声明两个浮点数变量，其中b4变量的赋值为0.333333。
	
	//验证变量只声明不赋值时值不确定。
	printf("a1=%d\n",a1); 
	printf("b3=%f\n",b3); 
	//验证变量值确定。
	printf("a4=%d\n",a4); 
	printf("b4=%f\n",b4); 
	//使用变量进行四则计算
	printf("a4+a5=%d\n",a4*a5); 
	printf("b4+b5=%f\n",b4+b5); 
	return 0;
}

/*
计算机存储整数int占4个字节，每字节8位，一共32位，每一位只能用0或1来存储（2进制）
2进制与10进制换算如下：
1(2) = 1(10)
10(2) = 2(10)
100(2) = 4(10)
1000(2) = 8(10)
...
1000000(2) = 1所在从右往数第n位的2^(n-1)次方，2^(7-1)=64(10)

下面我们计算一下：
101001(2) = 32+8+1=41 找到规律了吗？

问题：一个32位的存储空间，最大可以表示多大的整数吗？
11111111111111111111111111111111(2) = ? = 100000000000000000000000000000000(2) -1(2)= 2^32 - 1
32个1	                                                       32个0
算对了吗？看出计算技巧了吗？

技巧一：记住2^10以下对应的整数，且2^10 = 1024，计算2^32-1 = 2^10*2^10*2^10*2^2-1=1024*1024*1024-1=约等于1000*1000*1000=10^9=十亿级

问题：一个整数变量能存储的范围是多少？
由于int是有符号的，所以有效存储位为31位，第一位符号位+31位数据位
所以正数范围为0~2^32-1 ， 负数范围0~-2^32（保证能有效存储正负亿级别的整数）10^9
超过正整数范围会变成负整数，超过负整数范围会变成正整数，在进行计算的时候我们要对数据结果进行估算，int能否有效存储，不然会有异外的结果
*/